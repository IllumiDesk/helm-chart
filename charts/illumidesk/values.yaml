# IllumiDesk configuration values
# --------------------

## String to partially override illumidesk.fullname template (will maintain the release name)
##
# nameOverride:

## String to fully override illumidesk.fullname template
##
# fullnameOverride:

## Create and use roles and service accounts with Role Based Access Control (RBAC).
##
rbac:
  # Enables or disables
  enabled: true

## Creates Service account for the image registry  for authentication
##
imageCredentials:
  enabled: false
  registry: https://index.docker.io/v1/
  username: illumideskops
  email: hello@illumidesk.com

## JupyterHub configuration
## ref: https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/master/jupyterhub/values.yaml
##
jupyterhub:
  # JupyterHub's application settings
  # ref: https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/master/jupyterhub/values.yaml
  hub:
    # Jupyterhub resources regarding requests for CPU and memory
    resources:
      requests:
        # CPU that is allocated to the hub
        cpu: "200m"
        # memory that is allocated to the hub
        memory: "400Mi"
      limits:
        # Max CPU that is allocated to the hub
        cpu: "400m"
        # Max memory that is allocated to the hub
        memory: "800Mi"
    config:
    # JupyterHub's database configuration. Defaults to "postgres" since other options, such as "sqlite-pvc",
    # require additional PVC configuration settings.
    # ref: https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#hub-db
    db:
      # Database type
      # ref: https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#hub-db-type
      type: postgres
    # Extra configuration options
    # ref: https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#hub-extraconfig
    extraEnv:
      # Select Authentication Type: LTI11, LTI13, AUTH0
      CUSTOM_AUTH_TYPE:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: CUSTOM_AUTH_TYPE
      # Provide Organization Name that matches Namespace
      ORGANIZATION_NAME:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: ORGANIZATION_NAME
      # Jupyterhub API URL
      JUPYTERHUB_API_URL:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: JUPYTERHUB_API_URL
      # Mount Root
      ILLUMIDESK_MNT_ROOT: "/illumidesk-courses"
      # OIDC Authorize URL
      OIDC_AUTHORIZE_URL:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: OIDC_AUTHORIZE_URL
      OIDC_TOKEN_URL:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: OIDC_TOKEN_URL
      OIDC_USERDATA_URL:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: OIDC_USERDATA_URL
      OIDC_CLIENT_ID:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: OIDC_CLIENT_ID
      OIDC_CLIENT_SECRET:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: OIDC_CLIENT_SECRET
      OIDC_CALLBACK_URL:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: OIDC_CALLBACK_URL
      LTI_CONSUMER_KEY:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: LTI_CONSUMER_KEY
      LTI13_PRIVATE_KEY: "/srv/jupyterhub/rsa_private.key"
      LTI13_CLIENT_ID:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: LTI13_CLIENT_ID
      LTI13_ENDPOINT:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: LTI13_ENDPOINT
      LTI13_AUTHORIZE_URL:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: LTI13_AUTHORIZE_URL
      LTI13_TOKEN_URL:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: LTI13_TOKEN_URL
      POSTGRES_NBGRADER_USER:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: POSTGRES_NBGRADER_USER
      POSTGRES_NBGRADER_HOST:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: POSTGRES_NBGRADER_HOST
      POSTGRES_JUPYTERHUB_HOST:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: POSTGRES_JUPYTERHUB_HOST
      POSTGRES_JUPYTERHUB_USER:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: POSTGRES_JUPYTERHUB_USER
      POSTGRES_JUPYTERHUB_PORT:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: POSTGRES_JUPYTERHUB_PORT
      POSTGRES_JUPYTERHUB_DB:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: POSTGRES_JUPYTERHUB_DB
    extraConfig:
      # The logo that appears on the top right of the control panel and end-user notebooks with Jupyter Classic.
      logoConfig: |
        c.JupyterHub.logo_file = "/srv/jupyterhub/illumidesk-80.png"

      illumideskAuthConfig: |

        import os
        from illumidesk.authenticators.authenticator import setup_course_hook
        from illumideskdummyauthenticator.authenticator import IllumiDeskDummyAuthenticator
        from oauthenticator.generic import GenericOAuthenticator

        custom_auth_type = os.environ.get('CUSTOM_AUTH_TYPE')

        c.JupyterHub.hub_connect_ip = 'hub'
        if custom_auth_type == 'LTI13':
          c.JupyterHub.authenticator_class = 'illumidesk.authenticators.authenticator.LTI13Authenticator'
          c.LTI13Authenticator.endpoint = os.environ.get('LTI13_ENDPOINT') or 'https://illumidesk.instructure.com/api/lti/security/jwks'
          c.LTI13Authenticator.client_id = os.environ.get('LTI13_CLIENT_ID')
          c.LTI13Authenticator.authorize_url = os.environ.get('LTI13_AUTHORIZE_URL') or 'https://illumidesk.instructure.com/api/lti/authorize_redirect'
          c.LTI13Authenticator.token_url = os.environ.get('LTI13_TOKEN_URL') or 'https://illumidesk.instructure.com/login/oauth2/token'
          c.JupyterHub.extra_handlers = [
              (r'/lti13/config$', 'illumidesk.lti13.handlers.LTI13ConfigHandler'),
              (r'/lti13/jwks$', 'illumidesk.lti13.handlers.LTI13JWKSHandler'),
            ]
        elif custom_auth_type == 'LTI11':
          c.JupyterHub.authenticator_class = 'illumidesk.authenticators.authenticator.LTI11Authenticator'
          c.LTIAuthenticator.consumers = {
              os.environ.get('LTI_CONSUMER_KEY')
              or 'ild_test_consumer_key': os.environ.get('LTI_SHARED_SECRET')
              or 'ild_test_shared_secret'
          }
        elif custom_auth_type == 'DUMMY':
          c.JupyterHub.authenticator_class = 'illumideskdummyauthenticator.authenticator.IllumiDeskDummyAuthenticator'
          c.Authenticator.enable_auth_state = True
        elif custom_auth_type == 'AUTH0':
          # Set the authenticator
          c.JupyterHub.authenticator_class = GenericOAuthenticator
          c.Authenticator.auto_login = True
          # Verify TLS certificates.
          os.environ['OAUTH2_TLS_VERIFY'] = 'True'
          if os.environ.get('OAUTH2_TLS_VERIFY') == 'True':
              c.OAuthenticator.tls_verify = True
          else:
              c.OAuthenticator.tls_verify = False

          # OAuthenticator settings for AUTH0
          c.OAuthenticator.client_id = os.environ.get('OIDC_CLIENT_ID') or 'illumidesk-hub'
          c.OAuthenticator.client_secret = os.environ.get('OIDC_CLIENT_SECRET')
          c.OAuthenticator.oauth_callback_url = os.environ.get('OIDC_CALLBACK_URL')
          c.OAuthenticator.authorize_url = os.environ.get('OIDC_AUTHORIZE_URL') or 'https://auth.illumidesk.com/authorize'
          c.OAuthenticator.token_url = os.environ.get('OIDC_TOKEN_URL') or 'https://auth.illumidesk.com/oauth/token'
          c.GenericOAuthenticator.userdata_url = os.environ.get('OIDC_USERDATA_URL') or 'https://auth.illumidesk.com/userinfo'
          c.GenericOAuthenticator.userdata_method = 'GET'
          # clarify scopes
          c.GenericOAuthenticator.scope = ['openid','email','profile']
          # User name key returned by user
          c.GenericOAuthenticator.username_key = 'nickname'

        if custom_auth_type != 'AUTH0':

          c.Authenticator.post_auth_hook = setup_course_hook

          def userdata_hook(spawner, auth_state):
              if not auth_state:
                  raise ValueError('auth_state not enabled.')
              spawner.log.debug('auth_state_hook set with %s role' % auth_state['user_role'])
              user_role = auth_state['user_role']
              # set spawner environment
              spawner.environment['USER_ROLE'] = user_role
              spawner.log.debug('Assigned USER_ROLE env var to %s' % spawner.environment['USER_ROLE'])

          c.Spawner.auth_state_hook = userdata_hook

        c.Authenticator.enable_auth_state = True

        c.JupyterHub.db_url = 'postgresql://{user}:{password}@{host}:{port}/{db}'.format(
          user=os.environ.get('POSTGRES_JUPYTERHUB_USER'),
          password=os.environ.get('POSTGRES_JUPYTERHUB_PASSWORD'),
          host=os.environ.get('POSTGRES_JUPYTERHUB_HOST'),
          port=os.environ.get('POSTGRES_JUPYTERHUB_PORT'),
          db=os.environ.get('POSTGRES_JUPYTERHUB_DB'),
        )
        # Upgrade the database automatically on start
        c.JupyterHub.upgrade_db = True

      illumideskSecurity: |
        c.JupyterHub.tornado_settings = {
          "headers": {"Content-Security-Policy": "frame-ancestors 'self' *"},
          "cookie_options": {"SameSite": "None", "Secure": True},
        }

      privateKey: |
        import os
        import z2jh
        from os import chmod
        from Crypto.PublicKey import RSA
        key_path = os.environ.get('LTI13_PRIVATE_KEY') or '/srv/jupyterhub/rsa_private.key'
        key = RSA.generate(2048)
        with open(key_path, 'wb') as content_file:
          content_file.write(key.exportKey('PEM'))
        chmod(key_path, 0o600)

      illumideskServices: |
        import requests
        import os
        import z2jh
        custom_auth_type = os.environ.get('CUSTOM_AUTH_TYPE')
        if custom_auth_type != 'AUTH0':
          c.JupyterHub.services.append({
            'name': 'announcement',
            'admin': True,
            'url': 'http://0.0.0.0:8889',
            'command': ["python3", "/etc/jupyterhub-services/announcement.py", "--port", "8889", "--api-prefix", "/services/announcement"],
            'api_token': os.environ.get("JUPYTERHUB_API_TOKEN") })
          # load extra grader services launched from grader-setup service
          services_resp = requests.get('http://grader-setup-service.{}.svc.cluster.local:8000/services'.format(os.environ.get('ORGANIZATION_NAME')))
          services_resp = services_resp.json()
          c.JupyterHub.load_groups.update(services_resp['groups'])
          c.JupyterHub.services.extend(services_resp['services'])


    # The JupyterHub docker image
    # ref: https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#hub-image
    image:
      # The JupyterHub image namespace. If the docker registry should be specified if using something other than
      # DockerHub (docker.io).
      name: "illumidesk/k8s-hub"
      # The JupyterHub image tag
      tag: "latest"
      # Whether or not to always pull the image from the registry.
      pullPolicy: IfNotPresent
    # Shuts down the end-user server (pod) when the user logs out.
    shutdownOnLogout: true
  # Settings for the JupyterHub proxy service. The proxy service is used to route users to their
  # pods and, if enabled, has the option to provide TLS termination.
  proxy:
    # TLS termination
    https:
      # Enables or disables TLS termination with the proxy
      enabled: true
    # Required proxy's secret token. Should be created before installing services with the helm chart.
    # You can create a secure 32 character token from your terminal with: openssl rand -hex 32
    secretToken: 'example'
    # Configuration of the proxy-public service
    # https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#proxy-service
    service:
      # The JupyterHub proxy service type. The sub-chart defaults to "LoadBalancer". However, the IllumiDesk
      # chart configures separate LoadBalancer that then connects to the JupyterHub proxy via ClusterIP or NodePort.
      type: ClusterIP
  # Single user server
  singleuser:
    # Default CPU Limits and Gurantees
    cpu:
      # Max CPU that can be allocated
      limit: 0.5
    # Default Memory Limits and Gurantees
    memory:
      # Max Memory that can be allocated
      limit: 1G
    # Default container command inherited from the jupyter/docker-stacks base image.
    # https://github.com/jupyter/docker-stacks/blob/master/base-notebook/start-singleuser.sh
    cmd: start-singleuser.sh
    # Single user server extra environment variables
    # ref: https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#singleuser-extraenv
    extraEnv:
      # If yes, Instructs the startup script to change the $NB_USER home directory owner and group to the
      # current value of $NB_UID and $NB_GID.
      CHOWN_HOME: 'yes'
      # The default editor for user's environment
      Editor: vim
    # The GID the hub process should be using when touching any volumes mounted.
    fsGid: 0
    # The UID the hub process should be running as.
    uid: 0
    # The single user notebook image. If using a registry other than DockerHub (docker.io), prepend the
    # registry's domain to the namespace. For example: quay.io/illumidesk/illumidesk-notebook.
    image:
      # The singleuser image namespace
      name: illumidesk/illumidesk-notebook
      # The singleuser image tag
      tag: latest
      # Specify whether or not to alwasy pull the singleuser image. This is useful for when the singleuser
      # image is updated using the same image tag, for example, the latest alias.
      pullPolicy: IfNotPresent

## Postgres setup
## ref: https://github.com/bitnami/charts/tree/master/bitnami/postgresql
##
postgresql:
  # Enables or disables an in cluster postgres
  enabled: false
  # Provide Postgresql username
  postgresqlUsername: postgres
  # Provide Postgresql password if username is not defined, the default username will have this password
  postgresqlPostgresPassword: 'postgres123'
  # Provide Postgresql password
  postgresqlPassword: 'postgres123'
  # Provide in cluster database name
  postgresqlDatabase: 'illumidesk'

## DatadogHQ Agent
## https://github.com/DataDog/helm-charts/tree/master/charts/datadog
##
datadog:
  # Enables or disables the Datadog agent
  enabled: false
  # Datadog's configuration settings
  datadog:
    # API key for the DatadogHQ account
    apiKey: ''
    # Customer's site
    site: ''
    # The Kubernetes cluster name
    clusterName: ''
    # Logs configuration
    logs:
      # Enables or disables log collection
      enabled: true
      # If true, collects all logs from running containers.
      containerCollectAll: true
    # Datadog's cluster agent which acts as a proxy between Datadog's API and
    # node-based agents.
    # ref: https://docs.datadoghq.com/agent/cluster_agent/
    clusterAgent:
      # Enables or disables the cluster agent
      enabled: true
      token: ''
      # Metrics enables autoscaling workloads based off of Datadog metrics
      # ref: https://docs.datadoghq.com/agent/cluster_agent/external_metrics/
      metricsProvider:
        # Enables or disables external metrics with Datadog.
        enabled: true

## Application Load Balancer (ALB) ingress controller
## ref: https://github.com/kubernetes-sigs/aws-load-balancer-controller
##
albIngressController:
  # Enables or disables the aws-alb-ingress-controller
  enabled: false
  # Enables or disables the IAM role for service accounts. This option must be set to true
  # if the AWS ALB Ingress Controller is enabled, otherwise the aws-ingress-controller pod
  # won't have sufficient priviledges to create the ALB.
  # ref: https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html
  enableIRSA: false
  # You must create kube2iam arn with your IAM credentials in order to provide them to the alb ingress controller container
  # ref: https://github.com/jtblin/kube2iam
  kube2iam: ''
  # Specify the name of the cluster created in eks
  clusterName: ''
  # Specify the vpc-id of the vpc that corresponds to your cluster VPC
  clusterVPC: vpc-XXXXXXX
  # Specify the aws region that your cluster is deployed to
  awsRegion: ''

albIngress:
  # Enables or disables the aws-alb-ingress-controller
  enabled: false
  # The sub-domain that is used with the illumidesk.com address. For example, 'test.illumidesk.com' would create the
  # test.illumidesk.com host name for the ingress resource.
  host: test.illumidesk.com
  # These ingress annotations are used so that the ALB Ingress Controller can autodiscover and group ingress resources.
  # Note: Navigate to readme Configuration table for list of Alb Ingress Controller Annotations
  # ref: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.1/examples/echo_server/#deploy-ingress-for-echoserver
  ingress:
    annotations: {}

## External DNS Service
## ref: https://github.com/bitnami/charts/tree/master/bitnami/external-dns
##
allowExternalDNS:
  # Enables or disables the external dns service.
  enabled: false
  # Enables or disables the IAM role for service accounts. If the external dns service
  # is enabled with AWS, then this must be set to true (enabled) so that the external-dns
  # pod has sufficient permissions to update DNS records with Route 53.
  # ref: https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html
  enableIRSA: false

## NFS service used to persist files for personal workspaces and to provide a shared file
## system used for the grader's exchange directory (release/fetch/submit folders).
##
allowNFS:
  enabled: false
  # Domain for the NFS Server
  server: ''
  # Specifies local vs network file system
  type: 'local'
  # specify mount path
  path: /

## To test with a local file system, enable the following and confirm your instance has /illumidesk-nb-exchange-directory
## and /illumidesk-courses directory
##
allowLocal:
  # enables local file system
  enabled: false


illumideskSettings:
  enabled: true
## Grader setup service
##
graderSetupService:
  # Enables or disables the grader setup service
  enabled: false
  # The docker image to use for the grader setup service. If a registry other than
  # DockerHub is required (defaults to docker.io) the include the registy identifier
  # before the image name. For example:
  # k8s.gcr.io/<org-name>/<image-name:tag-name>
  graderSetupImage: illumidesk/grader-setup-service:latest
  # The docker image for the shared grader notebook. If a registry other than
  # DockerHub is required (defaults to docker.io) the include the registy identifier
  # before the image name. For example:
  # k8s.gcr.io/<org-name>/<image-name:tag-name>
  graderImage: illumidesk/grader-notebook:latest
  # Grader Setup Service Resource configuration
  # Gurantee's allocated CPU for the grader setup service pod
  graderCpuGurantee: "1.0"
  # Provides upperbound for CPU that can be allocated to a grader setup service pod
  graderCpuLimit: ""
  # Gurantee's allocated memory for the grader setup service pod
  graderMemGuarantee: "2Gi"
  # Provides upperbound for memory that can be allocated to a grader setup service pod
  graderMemLimit: ""
