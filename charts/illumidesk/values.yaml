# IllumiDesk configuration values
# --------------------

## String to partially override illumidesk.fullname template (will maintain the release name)
##
# nameOverride:

## String to fully override illumidesk.fullname template
##
# fullnameOverride:

## Create and use roles and service accounts with Role Based Access Control (RBAC).
##
rbac:
  # Enables or disables
  enabled: true

## Creates Service account for the image registry  for authentication
##
imageCredentials:
  enabled: false
  registry: https://index.docker.io/v1/
  username: illumideskops
  email: hello@illumidesk.com

## JupyterHub configuration
## ref: https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/master/jupyterhub/values.yaml
##
jupyterhub:
  # JupyterHub's application settings
  # ref: https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/master/jupyterhub/values.yaml
  hub:
    # clone custom JupyterHub templates into a volume
    initContainers:
      - name: "git-clone-templates"
        image: "illumidesk/alpine-git:1.0.30"
        args:
          - clone
          - --single-branch
          - --branch=main
          - --depth=1
          - --
          - https://github.com/illumidesk/jhubui.git
          - /etc/jupyterhub/custom
        securityContext:
          runAsUser: 0
        volumeMounts:
          - name: custom-templates
            mountPath: "/etc/jupyterhub/custom"
    extraVolumes:
      - name: custom-templates
        emptyDir: {}
    extraVolumeMounts:
      - name: custom-templates
        mountPath: "/etc/jupyterhub/custom"
    # Maximum number of concurrent servers that can be active at a time. 0 means that no limit is enforced
    activeServerLimit: 0
    # Jupyterhub resources regarding requests for CPU and memory
    resources:
      requests:
        # CPU that is allocated to the hub
        cpu: "200m"
        # memory that is allocated to the hub
        memory: "400Mi"
      limits:
        # Max CPU that is allocated to the hub
        cpu: "400m"
        # Max memory that is allocated to the hub
        memory: "800Mi"
    config:
    # JupyterHub's database configuration. Defaults to "postgres" since other options, such as "sqlite-pvc",
    # require additional PVC configuration settings.
    # ref: https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#hub-db
    db:
      # Database type
      # ref: https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#hub-db-type
      type: postgres
    # Extra configuration options
    # ref: https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#hub-extraconfig
    extraEnv:
      # Select Authentication Type: LTI11, LTI13, AUTH0
      CUSTOM_AUTH_TYPE:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: CUSTOM_AUTH_TYPE
      # Provide Organization Name that matches Namespace
      ORGANIZATION_NAME:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: ORGANIZATION_NAME
      # Jupyterhub API URL
      JUPYTERHUB_API_URL:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: JUPYTERHUB_API_URL
      # OIDC Authorize URL
      OIDC_AUTHORIZE_URL:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: OIDC_AUTHORIZE_URL
      OIDC_TOKEN_URL:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: OIDC_TOKEN_URL
      OIDC_USERDATA_URL:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: OIDC_USERDATA_URL
      OIDC_CLIENT_ID:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: OIDC_CLIENT_ID
      OIDC_CLIENT_SECRET:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: OIDC_CLIENT_SECRET
      OIDC_CALLBACK_URL:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: OIDC_CALLBACK_URL
      LTI_CONSUMER_KEY:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: LTI_CONSUMER_KEY
      LTI13_CLIENT_ID:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: LTI13_CLIENT_ID
      LTI13_ENDPOINT:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: LTI13_ENDPOINT
      LTI13_AUTHORIZE_URL:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: LTI13_AUTHORIZE_URL
      LTI13_TOKEN_URL:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: LTI13_TOKEN_URL
      POSTGRES_NBGRADER_USER:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: POSTGRES_NBGRADER_USER
      POSTGRES_NBGRADER_HOST:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: POSTGRES_NBGRADER_HOST
      POSTGRES_JUPYTERHUB_HOST:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: POSTGRES_JUPYTERHUB_HOST
      POSTGRES_JUPYTERHUB_USER:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: POSTGRES_JUPYTERHUB_USER
      POSTGRES_JUPYTERHUB_PORT:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: POSTGRES_JUPYTERHUB_PORT
      POSTGRES_JUPYTERHUB_DB:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: POSTGRES_JUPYTERHUB_DB
      AWS_SECRET:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: AWS_SECRET
      AWS_REGION:
        valueFrom:
          configMapKeyRef:
            name: hub-illumidesk-cm           # The ConfigMap this value comes from.
            key: AWS_REGION
      LTI13_PRIVATE_KEY: "/srv/jupyterhub/rsa_private.key"
      # Mount Root
      ILLUMIDESK_MNT_ROOT: "/illumidesk-courses"
    extraConfig:
      # The logo that appears on the top right of the control panel and end-user notebook'))s with Jupyter Classic.
      logoConfig: |
        c.JupyterHub.logo_file = "/srv/jupyterhub/illumidesk-80.png"

      illumideskAuthConfig: |

        import os
        from illumidesk.authenticators.authenticator import setup_course_hook
        from oauthenticator.generic import GenericOAuthenticator
        from secretsmanager.secretsmanager import SecretsManager
        custom_auth_type = os.environ.get('CUSTOM_AUTH_TYPE')
        c.JupyterHub.hub_connect_ip = 'hub'
        if custom_auth_type == 'LTI13':
          c.JupyterHub.authenticator_class = 'illumidesk.authenticators.authenticator.LTI13Authenticator'
          c.LTI13Authenticator.endpoint = os.environ.get('LTI13_ENDPOINT') or 'https://illumidesk.instructure.com/api/lti/security/jwks'
          c.LTI13Authenticator.client_id = os.environ.get('LTI13_CLIENT_ID')
          c.LTI13Authenticator.authorize_url = os.environ.get('LTI13_AUTHORIZE_URL') or 'https://illumidesk.instructure.com/api/lti/authorize_redirect'
          c.LTI13Authenticator.token_url = os.environ.get('LTI13_TOKEN_URL') or 'https://illumidesk.instructure.com/login/oauth2/token'
          c.JupyterHub.extra_handlers = [
              (r'/lti13/config$', 'illumidesk.lti13.handlers.LTI13ConfigHandler'),
              (r'/lti13/jwks$', 'illumidesk.lti13.handlers.LTI13JWKSHandler'),
            ]
        elif custom_auth_type == 'LTI11':
          c.JupyterHub.authenticator_class = 'ltiauthenticator.LTIAuthenticator'
          c.LTIAuthenticator.consumers = {
              os.environ.get('LTI_CONSUMER_KEY')
              or 'ild_test_consumer_key': os.environ.get('LTI_SHARED_SECRET')
              or 'ild_test_shared_secret'
          }
        elif custom_auth_type == 'DUMMY':
          c.JupyterHub.authenticator_class = 'illumideskdummyauthenticator.authenticator.IllumiDeskDummyAuthenticator'
          c.Authenticator.enable_auth_state = True
        elif custom_auth_type == 'AUTH0':
          # Set the authenticator
          c.JupyterHub.authenticator_class = GenericOAuthenticator
          c.Authenticator.auto_login = True
          # Verify TLS certificates.
          os.environ['OAUTH2_TLS_VERIFY'] = 'True'
          if os.environ.get('OAUTH2_TLS_VERIFY') == 'True':
              c.OAuthenticator.tls_verify = True
          else:
              c.OAuthenticator.tls_verify = False

          # OAuthenticator settings for AUTH0
          c.OAuthenticator.client_id = os.environ.get('OIDC_CLIENT_ID') or 'illumidesk-hub'
          c.OAuthenticator.client_secret = os.environ.get('OIDC_CLIENT_SECRET')
          c.OAuthenticator.oauth_callback_url = os.environ.get('OIDC_CALLBACK_URL')
          c.OAuthenticator.authorize_url = os.environ.get('OIDC_AUTHORIZE_URL') or 'https://auth.illumidesk.com/authorize'
          c.OAuthenticator.token_url = os.environ.get('OIDC_TOKEN_URL') or 'https://auth.illumidesk.com/oauth/token'
          c.GenericOAuthenticator.userdata_url = os.environ.get('OIDC_USERDATA_URL') or 'https://auth.illumidesk.com/userinfo'
          c.GenericOAuthenticator.userdata_method = 'GET'
          # clarify scopes
          c.GenericOAuthenticator.scope = ['openid','email','profile']
          # User name key returned by user
          c.GenericOAuthenticator.username_key = 'nickname'

        if custom_auth_type != 'AUTH0':

          c.Authenticator.post_auth_hook = setup_course_hook

          def userdata_hook(spawner, auth_state):
              if not auth_state:
                  raise ValueError('auth_state not enabled.')
              spawner.log.debug('auth_state_hook set with %s role' % auth_state['user_role'])
              user_role = auth_state['user_role']
              # set spawner environment
              spawner.environment['USER_ROLE'] = user_role
              spawner.log.debug('Assigned USER_ROLE env var to %s' % spawner.environment['USER_ROLE'])

          c.Spawner.auth_state_hook = userdata_hook

        c.Authenticator.enable_auth_state = True
        aws_secret_arn = os.environ.get('AWS_SECRET')
        print("aws_secret_arn", aws_secret_arn)
        region = os.environ.get('AWS_REGION') or 'us-west-2'
        secretmanager = SecretsManager(aws_secret_arn, region_name=region)
        if secretmanager.host == "":
            secretmanager.host = os.environ.get('POSTGRES_JUPYTERHUB_HOST')

        if aws_secret_arn == "" or aws_secret_arn is None:
            c.JupyterHub.db_url = 'postgresql://{user}:{password}@{host}:{port}/{db}'.format(
              user=os.environ.get('POSTGRES_JUPYTERHUB_USER'),
              password=os.environ.get('POSTGRES_JUPYTERHUB_PASSWORD'),
              host=os.environ.get('POSTGRES_JUPYTERHUB_HOST'),
              port=os.environ.get('POSTGRES_JUPYTERHUB_PORT'),
              db=os.environ.get('POSTGRES_JUPYTERHUB_DB'),
            )
        else:
            print(secretmanager.rds_connection_string)
            c.JupyterHub.db_url = secretmanager.rds_connection_string 
        # Upgrade the database automatically on start
        c.JupyterHub.upgrade_db = True

      illumideskSecurity: |
        c.JupyterHub.tornado_settings = {
          "headers": {"Content-Security-Policy": "frame-ancestors 'self' *"},
          "cookie_options": {"SameSite": "None", "Secure": True},
        }

      privateKey: |
        import os
        import z2jh
        from os import chmod
        from Crypto.PublicKey import RSA
        key_path = os.environ.get('LTI13_PRIVATE_KEY') or '/srv/jupyterhub/rsa_private.key'
        key = RSA.generate(2048)
        with open(key_path, 'wb') as content_file:
          content_file.write(key.exportKey('PEM'))
        chmod(key_path, 0o600)

      illumideskServices: |
        import requests
        import os
        import z2jh
        custom_auth_type = os.environ.get('CUSTOM_AUTH_TYPE')
        org_name = os.environ.get('ORGANIZATION_NAME')
        jupyterhub_api_token = os.environ.get('JUPYTERHUB_API_TOKEN')
        c.JupyterHub.services.append({
          'name': 'announcement',
          'admin': True,
          'url': 'http://0.0.0.0:8889',
          'command': ["python3", "/etc/jupyterhub-services/announcement.py", "--port", "8889", "--api-prefix", "/services/announcement"],
          'api_token': jupyterhub_api_token })
        # load extra grader services launched from grader-setup service
        services_resp = requests.get('http://grader-setup-service.{}.svc.cluster.local:8000/services'.format(org_name))
        services_resp = services_resp.json()
        c.JupyterHub.load_groups.update(services_resp['groups'])
        c.JupyterHub.services.extend(services_resp['services'])


    # The JupyterHub docker image
    # ref: https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#hub-image
    image:
      # The JupyterHub image namespace. If the docker registry should be specified if using something other than
      # DockerHub (docker.io).
      name: "illumidesk/k8s-hub"
      # The JupyterHub image tag
      tag: "latest"
      # Whether or not to always pull the image from the registry.
      pullPolicy: IfNotPresent
    # Shuts down the end-user server (pod) when the user logs out.
    shutdownOnLogout: true
  # Settings for the JupyterHub proxy service. The proxy service is used to route users to their
  # pods and, if enabled, has the option to provide TLS termination.
  proxy:
    # TLS termination
    https:
      # Enables or disables TLS termination with the proxy
      enabled: true
    # Required proxy's secret token. Should be created before installing services with the helm chart.
    # You can create a secure 32 character token from your terminal with: openssl rand -hex 32
    secretToken: 'example'
    # Configuration of the proxy-public service
    # https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#proxy-service
    service:
      # The JupyterHub proxy service type. The sub-chart defaults to "LoadBalancer". However, the IllumiDesk
      # chart configures separate LoadBalancer that then connects to the JupyterHub proxy via ClusterIP or NodePort.
      type: ClusterIP
  # Single user server
  singleuser:
    # Default CPU Limits and Gurantees
    cpu:
      # Max CPU that can be allocated
      limit: 0.5
    # Default Memory Limits and Gurantees
    memory:
      # Max Memory that can be allocated
      limit: 1G
    # Default container command inherited from the jupyter/docker-stacks base image.
    # https://github.com/jupyter/docker-stacks/blob/master/base-notebook/start-singleuser.sh
    cmd: start-singleuser.sh
    # Single user server extra environment variables
    # ref: https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#singleuser-extraenv
    extraEnv:
      # If yes, Instructs the startup script to change the $NB_USER home directory owner and group to the
      # current value of $NB_UID and $NB_GID.
      CHOWN_HOME: 'yes'
      # The default editor for user's environment
      Editor: vim
    # The GID the hub process should be using when touching any volumes mounted.
    fsGid: 0
    # The UID the hub process should be running as.
    uid: 0
    # The single user notebook image. If using a registry other than DockerHub (docker.io), prepend the
    # registry's domain to the namespace. For example: quay.io/illumidesk/illumidesk-notebook.
    image:
      # The singleuser image namespace
      name: illumidesk/illumidesk-notebook
      # The singleuser image tag
      tag: latest
      # Specify whether or not to alwasy pull the singleuser image. This is useful for when the singleuser
      # image is updated using the same image tag, for example, the latest alias.
      pullPolicy: IfNotPresent

## Postgres setup
## ref: https://github.com/bitnami/charts/tree/master/bitnami/postgresql
##
postgresql:
  # Enables or disables an in cluster postgres
  enabled: false
  # Provide Postgresql username
  postgresqlUsername: postgres
  # Provide Postgresql password if username is not defined, the default username will have this password
  postgresqlPostgresPassword: postgres123
  # Provide Postgresql password
  postgresqlPassword: postgres123
  # Provide in cluster database name
  postgresqlDatabase: illumidesk
  # Default existing secret name for postgres passwords
  existingSecret: 'illumidesk-secret'
  # Database Server Port
  service:
    port: 5432

externalDatabase:
  # Enables or disables configuration of external Database
  enabled: false
  # Default existing secret name for external database password passwords
  existingSecret: 'illumidesk-secret'
  # Host name for external database
  host: ''
  # Provide external database name
  database: illumidesk
  # Database Server Port
  port: 5432
  # Database user
  databaseUser: postgres
  # Database password
  databasePassword: postgres123

albIngress:
  # Enables or disables the aws-alb-ingress-controller
  enabled: false
  # The sub-domain that is used with the illumidesk.com address. For example, 'test.illumidesk.com' would create the
  # test.illumidesk.com host name for the ingress resource.
  host: test.illumidesk.com
  # These ingress annotations are used so that the ALB Ingress Controller can autodiscover and group ingress resources.
  # Note: Navigate to readme Configuration table for list of Alb Ingress Controller Annotations
  # ref: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.1/examples/echo_server/#deploy-ingress-for-echoserver
  ingress:
    annotations: {}

## NFS service used to persist files for personal workspaces and to provide a shared file
## system used for the grader's exchange directory (release/fetch/submit folders).
##
allowNFS:
  enabled: false
  # Domain for the NFS Server
  server: ''
  # Specifies local vs network file system
  type: 'local'
  # specify mount path
  path: /

## To test with efs csi driver to persist files for personal workspaces
##
allowEFS:
  enabled: false
  # Volume Handle for EFS
  volumeHandle: ''
  # Pass nb Exchange Access Point. If let empty, Volume Handle will be passed with mountPath /illumidesk-nb-exchange
  nbExchangeAccessPoint: ''
  # Pass Illumidesk Courses Access Point. If let empty, Volume Handle will be passed with mountPath /illumidesk-courses
  illumideskCoursesAccessPoint: ''

## To test with a local file system, enable the following and confirm your instance has /illumidesk-nb-exchange
## and /illumidesk-courses directory
##
allowLocal:
  # enables local file system
  enabled: false

## IllumiDesk settings associated to values set in the ConfigMap
## If disabled, the ConfigMap manifest is not created and all variables will
## disregard defaults defined with this chart and will have default values that
## are defined within the code base.
##
illumideskSettings:
  # Enables or disables the illumidesk settings options
  enabled: true
  # The custom authentication type. Should be one of DUMMY, LTI11, LTI13, or AUTH0.
  customAuthType: "DUMMY"
  # OIDC authorization URL
  oidcAuthorizeUrl: ""
  # OIDC token URL
  oidcTokenUrl: ""
  # OIDC userdata URL
  oidcUserData: ""
  # OIDC client id
  oidcClientId: ""
  # OIDC client secret
  oidcClientSecret: ""
  # OIDC callback URL
  oidcCallbackUrl: ""
  # LTI v1.1 consumer key
  ltiConsumerKey: ""
  # LTI v1.3 client id
  lti13ClientId: ""
  # LTI v1.3 endpoint URL
  lti13Endpoint: ""
  # LTI v1.3 authorization URL
  lti13AuthorizeUrl: ""
  # LTI v1.3 token URL
  lti13TokenUrl: ""
  #AWS Secrets Manager ARN
  awsSecretARN: ""
  #AWS Region
  awsRegion: "us-west-2"

## Grader setup service
##
graderSetupService:
  # Enables or disables the grader setup service
  enabled: false
  # The docker image to use for the grader setup service. If a registry other than
  # DockerHub is required (defaults to docker.io) the include the registy identifier
  # before the image name. For example:
  # k8s.gcr.io/<org-name>/<image-name:tag-name>
  graderSetupImage: illumidesk/grader-setup-service:latest
  # The docker image for the shared grader notebook. If a registry other than
  # DockerHub is required (defaults to docker.io) the include the registy identifier
  # before the image name. For example:
  # k8s.gcr.io/<org-name>/<image-name:tag-name>
  graderImage: illumidesk/grader-notebook:latest
  # Grader Setup Service Resource configuration
  # Gurantee's allocated CPU for the grader setup service pod
  graderCpuGurantee: "1000m"
  # Provides upperbound for CPU that can be allocated to a grader setup service pod
  graderCpuLimit: ""
  # Gurantee's allocated memory for the grader setup service pod
  graderMemGuarantee: "2Gi"
  # Provides upperbound for memory that can be allocated to a grader setup service pod
  graderMemLimit: ""
  # Pull Policy for Grader Setup Service
  pullPolicy: IfNotPresent
  # grader setup service Persistent Volume storage requests
  storageRequests: "200Mi"
  # grader setup service Persistent Volume storage capacity
  storageCapacity: ""
  # Pull Policy for Grader notebooks
  graderSpawnerPullPolicy: IfNotPresent
  # Grader Spawner CPU Gurantee
  graderSpawnerCpuGuarantee: "200m"
  # Grader Spawner CPU Limit
  graderSpawnerCpuLimit: "400m"
  # Grader Spawner Memory Gurantee
  graderSpawnerMemGuarantee: "500Mi"
  # Grader Spawner Memory Limit
  graderSpawnerMemLimit: ""
  # Max Storage allocated for Grader PV and PVCss
  graderSpawnerStorage: "2Gi"
