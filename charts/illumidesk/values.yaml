# IllumiDesk configuration values
# --------------------

## String to partially override illumidesk.fullname template (will maintain the release name)
##
# nameOverride:

## String to fully override illumidesk.fullname template
##
# fullnameOverride:

## Create and use roles and service accounts with Role Based Access Control (RBAC).
##
rbac:
  # Enables or disables
  enabled: true

## JupyterHub configuration
## ref: https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/master/jupyterhub/values.yaml
##
jupyterhub:
  custom:
    #Authentication types include LTI13, LTI11, SAML
    auth_type: 'LTI13'
    # Release name
    release: 'illumidesk-test'
    # database option is internal or external
    database_type: 'internal'
    # database username 
    database_user: 'postgres'
    # database password
    database_password: 'postgres123'
    # database port
    database_port: 5432
    # database name
    database: 'illumidesk'
    # if database type is set to external, set the db host  
    external_database_host: ''

    # LTI 1.3 settings
    # pass Client ID     
    lti13_client_id: '158020000000000105'

    #LTI URL
    lti_url: 'illumidesk.instructure.com'

    # LTI 1.1 Settings
    lti11_consumer_key: 'ild_test_consumer_key'

    lti11_shared_secret: 'ild_test_shared_secret'

    # SAML
    saml_xpath_username_location: '//saml:Attribute[@FriendlyName="Name"]/saml:AttributeValue/text()'
    saml_metadata_filepath: '/srv/jupyterhub/illumidesk-metadata.xml'
    saml_acs_endpoint_url: 'http://localhost:8000/hub/login'
    saml_time_format_string: '%Y-%m-%dT%H:%M:%SZ'
    saml_timezone: 'UTC'
    saml_nameid_format: 'urn:oasis:names:tc:SAML:2.0:nameid-format:transient'


    
  # JupyterHub's application settings
  # ref: https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/master/jupyterhub/values.yaml
  hub:
    # JupyterHub's database configuration. Defaults to "postgres" since other options, such as "sqlite-pvc",
    # require additional PVC configuration settings.
    # ref: https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#hub-db
    db:
      # Database type
      # ref: https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#hub-db-type
      type: postgres
    # Extra configuration options
    # ref: https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#hub-extraconfig
    extraEnv:
      LTI13_PRIVATE_KEY: '/srv/jupyterhub/rsa_private.key'
    extraConfig:
      # The logo that appears on the top right of the control panel and end-user notebooks with Jupyter Classic.
      logoConfig: |
        c.JupyterHub.logo_file = "/srv/jupyterhub/illumidesk-80.png"
      illumideskAuthConfig: |
        import os
        import z2jh
        from illumidesk.authenticators.authenticator import setup_course_hook
        
        # Set Required Environment Variables
        os.environ['ILLUMIDESK_MNT_ROOT'] = '/illumidesk-courses'
        os.environ['JUPYTERHUB_API_URL'] = 'http://hub:8081/hub/api'
        os.environ['JUPYTERHUB_API_TOKEN'] = os.system("openssl rand -hex 32")
        
        # Get Custom auth type Auth Type
        custom_auth_type = z2jh.get_config('custom.auth_type')
        
        if custom_auth_type == 'LTI13':
          c.JupyterHub.authenticator_class = 'illumidesk.authenticators.authenticator.LTI13Authenticator'
          lti13_url = z2jh.get_config('custom.lti_url')
          
          c.LTI13Authenticator.endpoint = 'https://{}/api/lti/security/jwks'.format(lti13_url)
          c.LTI13Authenticator.client_id = z2jh.get_config('custom.lti13_client_id')
          c.LTI13Authenticator.authorize_url = 'https://{}/api/lti/authorize_redirect'.format(lti13_url)
          c.LTI13Authenticator.token_url = 'https://{}/login/oauth2/token'.format(lti13_url)
          c.JupyterHub.extra_handlers = [
              (r'/lti13/config$', 'illumidesk.lti13.handlers.LTI13ConfigHandler'),
              (r'/lti13/jwks$', 'illumidesk.lti13.handlers.LTI13JWKSHandler'),
            ]
        elif custom_auth_type == 'LTI11':
          c.JupyterHub.authent=icator_class = 'illumidesk.authenticators.authenticator.LTI11Authenticator'
          c.LTIAuthenticator.consumers = {
              z2jh.get_config('custom.lti11_consumer_key')
              or 'ild_test_consumer_key': z2jh.get_config('custom.lti11_shared_secret')
              or 'ild_test_shared_secret'
          }
        elif custom_auth_type == 'SAML':
          
          # SAML authenticator class
          c.JupyterHub.authenticator_class = 'samlauthenticator.SAMLAuthenticator'
          # Refrain from creating system users
          c.JupyterHub.create_system_users = False
          
          # Fetch the user's location from a specific location
          c.JupyterHub.xpath_username_location = z2jh.get_config('custom.saml_xpath_username_location') or '//saml:Attribute[@FriendlyName="Name"]/saml:AttributeValue/text()'
          # Metadata file example downloaded from the Auth0 application
          c.SAMLAuthenticator.metadata_filepath = z2jh.get_config('custom.saml_metadata_filepath') or '/srv/jupyterhub/illumidesk-metadata.xml'
          # ACS endpoint (login URL)
          c.SAMLAuthenticator.acs_endpoint_url = z2jh.get_config('custom.saml_acs_endpoint_url') or 'http://localhost:8000/hub/login'
          # Update time stamp format if it doesn't match the following format:
          # %Y-%M-%dT%H:%M:%SZ
          # 2021-01-21T00:38:36.092Z 
          c.SAMLAuthenticator.time_format_string = z2jh.get_config('custom.saml_time_format_string') or '%Y-%m-%dT%H:%M:%SZ'
          # Looks like we can't get the timezone from the previous string - we need to set it
          c.SAMLAuthenticator.idp_timezone = z2jh.get_config('custom.saml_timezone') or 'UTC'
          # Update the nameid format
          c.SAMLAuthenticator.nameid_format =  z2jh.get_config('custom.saml_nameid_format') or 'urn:oasis:names:tc:SAML:2.0:nameid-format:transient'
        
        # Assigned to the post authentication hook
        c.Authenticator.post_auth_hook = setup_course_hook
        
        def userdata_hook(spawner, auth_state):
            if not auth_state:
                raise ValueError('auth_state not enabled.')
            spawner.log.debug('auth_state_hook set with %s role' % auth_state['user_role'])
            user_role = auth_state['user_role']
            # set spawner environment
            spawner.environment['USER_ROLE'] = user_role
            spawner.log.debug('Assigned USER_ROLE env var to %s' % spawner.environment['USER_ROLE'])
        c.Spawner.auth_state_hook = userdata_hook
      
      illumideskDatabaseConfig: |
        import z2jh
        import os

        database_type = z2jh.get_config('custom.database_type')

        # Set host name based on internal or external database
        if database_type == 'internal':
          release = z2jh.get_config('custom.release')
          database_host = '{}-postgresql.{}.svc.cluster.local'.format(release,release)
          os.environ['POSTGRES_JUPYTERHUB_HOST'] = database_host
          os.environ['POSTGRES_NBGRADER_HOST'] = database_host
        elif database_type == 'external': 
          os.environ['POSTGRES_JUPYTERHUB_HOST'] = z2jh.get_config('custom.external_database_host')
          os.environ['POSTGRES_NBGRADER_HOST'] = z2jh.get_config('custom.external_database_host')
        
        # Set nbgrader user and password
        os.environ['POSTGRES_NBGRADER_USER'] = z2jh.get_config('custom.database_user')
        os.environ['POSTGRES_NBGRADER_PASSWORD'] = z2jh.get_config('custom.database_password')

        # set jupyterhub DB
        c.JupyterHub.db_url = 'postgresql://{user}:{password}@{host}:{port}/{db}'.format(
          user=z2jh.get_config('custom.database_user'),
          password=z2jh.get_config('custom.database_password'),
          host=os.environ.get('POSTGRES_JUPYTERHUB_HOST'),
          port=z2jh.get_config('custom.database_port'),
          db=z2jh.get_config('custom.database'),
        )
      illumideskSecurity: |
        c.JupyterHub.tornado_settings = {
          "headers": {"Content-Security-Policy": "frame-ancestors 'self' *"},
          "cookie_options": {"SameSite": "None", "Secure": True},
        }
      privateKey: |
        import os
        import z2jh
        from os import chmod
        from Crypto.PublicKey import RSA
        key_path = os.environ.get('LTI13_PRIVATE_KEY') or '/srv/jupyterhub/rsa_private.key'
        key = RSA.generate(2048)
        with open(key_path, 'wb') as content_file:
          content_file.write(key.exportKey('PEM'))
        chmod(key_path, 0o600)

      illumideskServices: |
        import requests
        import os
        import z2jh
        c.JupyterHub.services.append({
          'name': 'announcement',
          'admin': True,
          'url': 'http://0.0.0.0:8889',
          'command': ["python3", "/etc/jupyterhub-services/announcement.py", "--port", "8889", "--api-prefix", "/services/announcement"],
          'api_token': os.environ.get("JUPYTERHUB_API_TOKEN") })
        # load extra grader services launched from grader-setup service
        services_resp = requests.get('http://grader-setup-service.{}.svc.cluster.local:8000/services'.format(z2jh.get_config('release')))
        services_resp = services_resp.json()
        c.JupyterHub.load_groups.update(services_resp['groups'])
        c.JupyterHub.services.extend(services_resp['services'])

    # The JupyterHub docker image
    # ref: https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#hub-image
    image:
      # The JupyterHub image namespace. If the docker registry should be specified if using something other than
      # DockerHub (docker.io).
      name: illumidesk/jupyterhub
      # The JupyterHub image tag
      tag: k8s-latest
      # Whether or not to always pull the image from the registry.
      pullPolicy: Always
    # Shuts down the end-user server (pod) when the user logs out.
    shutdownOnLogout: true
  # Settings for the JupyterHub proxy service. The proxy service is used to route users to their
  # pods and, if enabled, has the option to provide TLS termination.
  proxy:
    # TLS termination
    https:
      # Enables or disables TLS termination with the proxy
      enabled: true
    # Required proxy's secret token. Should be created before installing services with the helm chart.
    # You can create a secure 32 character token from your terminal with: openssl rand -hex 32
    secretToken: 'example'
    # Configuration of the proxy-public service
    # https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#proxy-service
    service:
      # The JupyterHub proxy service type. The sub-chart defaults to "LoadBalancer". However, the IllumiDesk
      # chart configures separate LoadBalancer that then connects to the JupyterHub proxy via ClusterIP or NodePort.
      type: ClusterIP
  # Single user server
  singleuser:
    # Default container command inherited from the jupyter/docker-stacks base image.
    # https://github.com/jupyter/docker-stacks/blob/master/base-notebook/start-singleuser.sh
    cmd: start-singleuser.sh
    # Single user server extra environment variables
    # ref: https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html#singleuser-extraenv
    extraEnv:
      ORGANIZATION_NAME: 
      # If yes, Instructs the startup script to change the $NB_USER home directory owner and group to the
      # current value of $NB_UID and $NB_GID.
      CHOWN_HOME: 'yes'
      # The default editor for user's environment
      Editor: vim
    # The GID the hub process should be using when touching any volumes mounted.
    fsGid: 1000
    # The UID the hub process should be running as.
    uid: 1000
    # The single user notebook image. If using a registry other than DockerHub (docker.io), prepend the
    # registry's domain to the namespace. For example: quay.io/illumidesk/illumidesk-notebook.
    image:
      # The singleuser image namespace
      name: illumidesk/illumidesk-notebook
      # The singleuser image tag
      tag: latest
      # Specify whether or not to alwasy pull the singleuser image. This is useful for when the singleuser
      # image is updated using the same image tag, for example, the latest alias.
      pullPolicy: Always

## Postgres setup
## ref: https://github.com/bitnami/charts/tree/master/bitnami/postgresql
##
postgresql:
  # Enables or disables an in cluster postgres
  enabled: true
  # Provide Postgresql username
  postgresqlUsername: postgres
  # Provide Postgresql password if username is not defined, the default username will have this password
  postgresqlPostgresPassword: 'postgres123'
  # Provide Postgresql password
  postgresqlPassword: 'postgres123'
  # Provide in cluster database name
  postgresqlDatabase: 'illumidesk'

## DatadogHQ Agent
## https://github.com/DataDog/helm-charts/tree/master/charts/datadog
##
datadog:
  # Enables or disables the Datadog agent
  enabled: false
  # Datadog's configuration settings
  datadog:
    # API key for the DatadogHQ account
    apiKey: ''
    # Customer's site
    site: ''
    # The Kubernetes cluster name
    clusterName: ''
    # Logs configuration
    logs:
      # Enables or disables log collection
      enabled: true
      # If true, collects all logs from running containers.
      containerCollectAll: true
    # Datadog's cluster agent which acts as a proxy between Datadog's API and
    # node-based agents.
    # ref: https://docs.datadoghq.com/agent/cluster_agent/
    clusterAgent:
      # Enables or disables the cluster agent
      enabled: true
      token: ''
      # Metrics enables autoscaling workloads based off of Datadog metrics
      # ref: https://docs.datadoghq.com/agent/cluster_agent/external_metrics/
      metricsProvider:
        # Enables or disables external metrics with Datadog.
        enabled: true

## Application Load Balancer (ALB) ingress controller
## ref: https://github.com/kubernetes-sigs/aws-load-balancer-controller
##
albIngressController:
  # Enables or disables the aws-alb-ingress-controller
  enabled: false
  # Enables or disables the IAM role for service accounts. This option must be set to true
  # if the AWS ALB Ingress Controller is enabled, otherwise the aws-ingress-controller pod
  # won't have sufficient priviledges to create the ALB.
  # ref: https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html
  enableIRSA: false
  # You must create kube2iam arn with your IAM credentials in order to provide them to the alb ingress controller container
  # ref: https://github.com/jtblin/kube2iam
  kube2iam: ''
  # Specify the name of the cluster created in eks
  clusterName: ''
  # Specify the vpc-id of the vpc that corresponds to your cluster VPC
  clusterVPC: vpc-XXXXXXX
  # Specify the aws region that your cluster is deployed to
  awsRegion: ''

albIngress:
  # Enables or disables the aws-alb-ingress-controller
  enabled: false
  # The sub-domain that is used with the illumidesk.com address. For example, 'test.illumidesk.com' would create the
  # test.illumidesk.com host name for the ingress resource.
  host: test.illumidesk.com
  # These ingress annotations are used so that the ALB Ingress Controller can autodiscover and group ingress resources.
  # Note: Navigate to readme Configuration table for list of Alb Ingress Controller Annotations
  # ref: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.1/examples/echo_server/#deploy-ingress-for-echoserver
  ingress:
    annotations: {}

## External DNS Service
## ref: https://github.com/bitnami/charts/tree/master/bitnami/external-dns
##
allowExternalDNS:
  # Enables or disables the external dns service.
  enabled: false
  # Enables or disables the IAM role for service accounts. If the external dns service
  # is enabled with AWS, then this must be set to true (enabled) so that the external-dns
  # pod has sufficient permissions to update DNS records with Route 53.
  # ref: https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html
  enableIRSA: false

## Ingress Nginx controller
## ref: https://github.com/kubernetes/ingress-nginx
##
nginxIngressController:
  # Enables or disables the nginx-ingress controller. The nginx-ingress contoller
  # is set up with AWS annotations by default. It also specifies the use of the "nlb"
  # load balancer type.
  enabled: false
  # provide the VPC cidr for the eks cluster
  # ref: https://docs.aws.amazon.com/vpc/latest/userguide/working-with-vpcs.html
  vpcCIDR: 192.168.0.0/16
  # provide certificate ARN from AWS ACM
  # ref: https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html
  certificateArn: ''

## Ingress resource
##
nginxIngress:
  # Enables or disables the ingress resource. By default, the ingress resource root path
  # is associated to the proxy-public endpoing from the JupyterHub public facing service endpoint.
  enabled: false
  # The sub-domain that is used with the illumidesk.com address. For example, 'test.illumidesk.com' would create the
  # test.illumidesk.com host name for the ingress resource.
  host: 'test.illumidesk.com'

## NFS service used to persist files for personal workspaces and to provide a shared file
## system used for the grader's exchange directory (release/fetch/submit folders).
##
allowNFS:
  enabled: false
  # Domain for the NFS Server
  server: ''
  # specify mount path
  path: /

## Keycloak service (used for Authentication)
##
keyCloak:
  # Enables or disables the keycloak service. If disabled, then ensure the
  # JupyterHub authenticator is not using Keycloak with the GenericOAuthenticator
  # class.
  enabled: false
  # provide database schema for keycloak
  db_schema: public
  # provide database user with access to keycloak schema objects
  db_user: keycloak
  # provide keycloak database name. This may require you to create the database name in your database instance
  db_database: keycloak
  # provide database domain name
  db_addr: ''
  # provide name of database vendor
  db_vendor: POSTGRES
  # database password
  db_password: ''
  # admin user name for keycloak service
  keycloak_user: admin
  # password for keycloak service
  keycloak_password: admin

## Grader setup service
##
graderSetupService:
  # Enables or disables the grader setup service
  enabled: false
  # The docker image to use for the grader setup service. If a registry other than
  # DockerHub is required (defaults to docker.io) the include the registy identifier
  # before the image name. For example:
  # k8s.gcr.io/<org-name>/<image-name:tag-name>
  graderSetupImage: illumidesk/grader-setup-app:latest
  # The docker image for the shared grader notebook. If a registry other than
  # DockerHub is required (defaults to docker.io) the include the registy identifier
  # before the image name. For example:
  # k8s.gcr.io/<org-name>/<image-name:tag-name>
  graderImage: illumidesk/grader-notebook:latest
